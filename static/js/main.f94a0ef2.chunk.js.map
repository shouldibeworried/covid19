{"version":3,"sources":["methodology.js","thresholds.js","components.jsx","maps.jsx","pickAPlace.js","App.js","serviceWorker.js","index.js"],"names":["rNoughtWeeklyAverage","cases","sequence","map","total","index","currentGeneration","previousGeneration","NaN","slice","rNoughtSequence","reduce","x1","x2","length","caseFatality","deaths","nCases","nDeaths","cf","low","high","recentCases","confirmedRecentCasesPer100K","population","estimatedRecentCasesPer100K","unknownInfectionFactorMedian","recentDeaths","deathFactor","existing","r0","projected","recent","i","Math","floor","deathProjection","recentCasesAlertLevels","Map","r0AlertLevels","r0Summaries","projectionPhrases","confirmedCasesColors","estimatedCasesColors","r0Colors","checkLevel","levels","defaultValue","v","l","Array","from","keys","find","level","get","recentCasesAlertLevel","r0AlertLevel","r0Summary","projectionPhrase","r0Color","confirmedCasesColor","estimatedCasesColor","maybeThe","country","needsThe","includes","Header","props","handleFilterChange","bind","e","onFilterChange","this","target","value","europe","america","Navbar","bg","variant","className","Brand","Form","inline","Control","placeholder","aria-label","title","as","onChange","label","c","key","React","Component","CurrentSituation","localPopulation","unknownInfectionFactorRange","language","RECENTCASES","replace","Alert","toFixed","RECENTCASESEXPL","Number","isNaN","NODUNKELZIFFER","DUNKELZIFFER","Outlook","d","df","NORNOUGHT","RNOUGHT","RNOUGHTEXPL","deathsFactor","needsDisclaimer","PROJECTIONDISCLAIMER","DEATHPROJECTION","naMap","geoUrl","projection","projectionConfig","rotate","scale","euMap","colorMapFactory","getValue","colorScale","defaultColor","name","mapType","colorMap","onCountryChange","viewBox","geography","geographies","geo","rsmKey","onClick","properties","NAME_EN","fill","stroke","LegendEntry","text","color","style","paddingRight","display","width","height","xmlns","rx","Legend","colorArray","margin","R0Map","Card","Body","Text","href","ConfirmedEstdToggle","showEstimated","onToggleChange","ToggleButtonGroup","type","ToggleButton","RecentCasesMap","state","handleToggleChange","setState","longCodes","shortCodes","hr","cs","da","et","fi","fr","de","el","hu","is","it","lv","lt","mt","nl","no","nb","nn","pl","pt","ro","sk","sl","es","sv","rm","en","pickAPlace","hash","decodeURIComponent","window","location","eu","na","lang","navigator","toLowerCase","substring","App","lastUpdatedDate","dates","Object","Container","Row","Col","md","Intl","DateTimeFormat","month","day","year","timeZone","format","Date","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f94a0ef2.chunk.js","sourcesContent":["const week = 7;\nconst month = 30;\n\nconst genLen = 5;\nconst deathOffset = 16;\n\nconst infectionFatalityMin = 0.003;\nconst infectionFatalityMax = 0.010;\nconst infectionFatalityMed = 0.0064;\n\nconst minCasesPerGeneration = 40;\nexport const minDeathsPerMonth = 30;\nconst caseFatalityMin = 0.005;\n\n\nconst geoMean = (sequence) => (\n  sequence.reduce((x1, x2) => x1 * x2) ** (1 / sequence.length)\n);\n\n\n// Calculate rNought by dividing new cases in current period by new cases in\n// preceding period\nconst rNoughtSequence = (cases) => {\n  const rNought = (total, index) => {\n    const currentGeneration = total - cases[index - genLen];\n    const previousGeneration = cases[index - genLen] - cases[index - (2 * genLen)];\n    if (currentGeneration < minCasesPerGeneration || previousGeneration < minCasesPerGeneration) {\n      return NaN;\n    }\n    return currentGeneration / previousGeneration;\n  };\n\n  return cases.map(rNought).slice(2 * genLen);\n};\n\n\nexport const rNoughtWeeklyAverage = (cases) => geoMean(rNoughtSequence(cases).slice(-week));\n\n\n// Ratio of confirmed cases who passed after deathOffset days.\nconst caseFatality = (cases, deaths) => {\n  const nCases = (\n    cases[cases.length - 1 - deathOffset]\n    - cases[cases.length - 1 - deathOffset - month]\n  );\n  const nDeaths = (\n    deaths[cases.length - 1] - deaths[cases.length - 1 - month]\n  );\n\n  if (nDeaths < minDeathsPerMonth) {\n    return NaN;\n  }\n\n  const cf = nDeaths / nCases;\n\n  if (cf < caseFatalityMin) {\n    // this indicates underreporting of deaths\n    return { low: NaN, high: NaN };\n  }\n\n  return cf;\n};\n\n\nexport const unknownInfectionFactorRange = (cases, deaths) => {\n  const cf = caseFatality(cases, deaths);\n  const low = cf / infectionFatalityMax;\n  const high = cf / infectionFatalityMin;\n  return { low, high };\n};\n\n\nexport const unknownInfectionFactorMedian = (cases, deaths) => (\n  caseFatality(cases, deaths) / infectionFatalityMed\n);\n\n\nconst recentCases = (cases) => {\n  const current = cases[cases.length - 1];\n  const previous = cases[cases.length - 1 - week];\n  return current - previous;\n};\n\n\nexport const confirmedRecentCasesPer100K = (cases, population) => (\n  (100000 * recentCases(cases)) / population\n);\n\n\nexport const estimatedRecentCasesPer100K = (cases, deaths, population) => (\n  confirmedRecentCasesPer100K(cases, population) * unknownInfectionFactorMedian(cases, deaths)\n);\n\n\nexport const recentDeaths = (deaths) => {\n  const current = deaths[deaths.length - 1];\n  const previous = deaths[deaths.length - 1 - month];\n  return current - previous;\n};\n\n\nconst deathProjection = (cases, deaths) => {\n  /* First, compute number of cases that will contribute to next months\n   * deaths. These are new cases starting from `deathOffset` days ago +\n   * projected cases for following (30 - deathOffset) days */\n  const current = cases[cases.length - 1];\n  const previous = cases[cases.length - 1 - deathOffset];\n  const existing = current - previous;\n\n  const r0 = rNoughtWeeklyAverage(cases);\n  let projected = 0;\n  let recent = recentCases(cases);\n  for (let i = 0; i < Math.floor((month - deathOffset) / week); i += 1) {\n    recent *= r0;\n    projected += recent;\n  }\n\n  const stubLength = (month - deathOffset) % week;\n  const stubCases = (r0 * recent * stubLength) / week;\n  projected += stubCases;\n\n  const cf = caseFatality(cases, deaths);\n  return (existing + projected) * cf;\n};\n\n\nexport const deathFactor = (cases, deaths) => deathProjection(cases, deaths) / recentDeaths(deaths);\n","const recentCasesAlertLevels = new Map([\n  [10, 'info'],\n  [50, 'warning'],\n]);\nconst defaultRecentCasesAlertLevel = 'danger';\n\nconst r0AlertLevels = new Map([\n  [0.9, 'success'],\n  [1.1, 'info'],\n  [1.35, 'warning'],\n]);\nconst defaultR0AlertLevel = 'danger';\n\nconst r0Summaries = new Map([\n  [0.95, 'going down'],\n  [1.05, 'more or less staying the same'],\n  [1.5, 'growing exponentially'],\n]);\nconst defaultR0Summary = 'growing exponentially at a high rate';\n\n\nconst projectionPhrases = new Map([\n  [0.4, 'less than half as many'],\n  [0.6, 'around half as many'],\n  [0.9, 'a slightly smaller number of'],\n  [1.1, 'roughly the same number of'],\n  [1.9, 'a greater number of'],\n  [2.2, 'around twice as many'],\n  [2.8, 'more than twice as many'],\n  [3.3, 'around three times as many'],\n  [4.7, 'more than three times as many'],\n  [5.5, 'around five times as many'],\n  [9.5, 'more than five times as many'],\n  [11, 'around ten times as many'],\n  [20, 'more than ten times as many'],\n]);\nconst defaultProjectionPhrase = 'more than twenty times as many';\n\nexport const confirmedCasesColors = new Map([\n  [5, '#ffffcc'],\n  [10, '#ffeda0'],\n  [25, '#fed976'],\n  [50, '#fea044'],\n  [100, '#f03423'],\n  [250, '#ca0d21'],\n  [500, '#8d001f'],\n  [100000, '#4e0011'],\n]);\nexport const defaultConfirmedCasesColor = '#eeeeee';\n\nexport const estimatedCasesColors = new Map([\n  [25, '#ffffcc'],\n  [50, '#ffeda0'],\n  [100, '#fed976'],\n  [250, '#fea044'],\n  [500, '#f03423'],\n  [1000, '#ca0d21'],\n  [2500, '#8d001f'],\n  [100000, '#4e0011'],\n]);\nexport const defaultEstimatedCasesColor = '#eeeeee';\n\nexport const r0Colors = new Map([\n  [0.6, '#4575b4'],\n  [0.75, '#74add1'],\n  [0.9, '#c6e6f1'],\n  [1.1, '#ffffbf'],\n  [1.35, '#fec779'],\n  [1.65, '#f46d43'],\n  [100, '#d73027'],\n]);\nexport const defaultR0Color = '#eeeeee';\n\nconst checkLevel = (levels, defaultValue) => (\n  (v) => {\n    const l = Array.from(levels.keys()).find((level) => level > v);\n    return typeof l === 'undefined' ? defaultValue : levels.get(l);\n  }\n);\n\nexport const needsDisclaimer = (r0, deathsFactor) => (\n  ((r0 > 1.05) && (deathsFactor < 1.1)) || ((r0 < 0.95) && (deathsFactor > 0.9))\n);\n\nexport const recentCasesAlertLevel = checkLevel(\n  recentCasesAlertLevels,\n  defaultRecentCasesAlertLevel,\n);\nexport const r0AlertLevel = checkLevel(r0AlertLevels, defaultR0AlertLevel);\nexport const r0Summary = checkLevel(r0Summaries, defaultR0Summary);\nexport const projectionPhrase = checkLevel(projectionPhrases, defaultProjectionPhrase);\nexport const r0Color = checkLevel(r0Colors, defaultR0Color);\nexport const confirmedCasesColor = checkLevel(confirmedCasesColors, defaultConfirmedCasesColor);\nexport const estimatedCasesColor = checkLevel(estimatedCasesColors, defaultEstimatedCasesColor);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Alert from 'react-bootstrap/Alert';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport {\n  rNoughtWeeklyAverage,\n  confirmedRecentCasesPer100K,\n  deathFactor,\n  recentDeaths,\n  unknownInfectionFactorRange,\n  minDeathsPerMonth,\n} from './methodology';\n\nimport language from './language.json';\nimport { needsThe } from './settings.json';\n\nimport {\n  recentCasesAlertLevel,\n  r0AlertLevel,\n  r0Summary,\n  projectionPhrase,\n  needsDisclaimer,\n} from './thresholds';\n\n\nconst maybeThe = (country) => (needsThe.includes(country) ? `the ${country}` : country);\n\nexport class Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n\n  handleFilterChange(e) {\n    const { onFilterChange } = this.props;\n    onFilterChange(e.target.value);\n  }\n\n  render() {\n    const { country, europe, america } = this.props;\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"justify-content-between\">\n        <Navbar.Brand>\n          Should I be worried?\n        </Navbar.Brand>\n        <Form inline>\n          <Form.Control\n            placeholder=\"Country/State/Province\"\n            aria-label=\"European Country, US State, or Canadian Province\"\n            title=\"European Country, US State, or Canadian Province\"\n            as=\"select\"\n            value={country}\n            onChange={this.handleFilterChange}\n          >\n            <optgroup label=\"North America\">\n              {america.map((c) => (\n                <option key={c}>\n                  {c}\n                </option>\n              ))}\n            </optgroup>\n            <optgroup label=\"Europe\">\n              {europe.map((c) => (\n                <option key={c}>\n                  {c}\n                </option>\n              ))}\n            </optgroup>\n          </Form.Control>\n        </Form>\n      </Navbar>\n    );\n  }\n}\n\nHeader.propTypes = {\n  country: PropTypes.string.isRequired,\n  europe: PropTypes.arrayOf(PropTypes.string).isRequired,\n  america: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n};\n\n\nexport function CurrentSituation(props) {\n  const {\n    country, cases, deaths, localPopulation,\n  } = props;\n  const recent = confirmedRecentCasesPer100K(cases, localPopulation);\n  const { low, high } = unknownInfectionFactorRange(cases, deaths);\n  return (\n    <div className=\"mt-4\">\n      <h5>\n        Current situation in&nbsp;\n        {maybeThe(country)}\n      </h5>\n      <p>\n        {language.RECENTCASES.replace('{country}', maybeThe(country))}\n      </p>\n      <Alert variant={recentCasesAlertLevel(recent)}>\n        {recent.toFixed(0)}\n        &nbsp;per 100,000 inhabitants\n      </Alert>\n      <p>\n        {language.RECENTCASESEXPL}\n      </p>\n      <p>\n        {(Number.isNaN(low) || Number.isNaN(high))\n          ? language.NODUNKELZIFFER\n          : language.DUNKELZIFFER\n            .replace(/{country}/g, maybeThe(country))\n            .replace(/{low}/g, low.toFixed(0))\n            .replace(/{high}/g, high.toFixed(0))}\n      </p>\n    </div>\n  );\n}\n\nCurrentSituation.propTypes = {\n  country: PropTypes.string.isRequired,\n  cases: PropTypes.arrayOf(PropTypes.number).isRequired,\n  deaths: PropTypes.arrayOf(PropTypes.number).isRequired,\n  localPopulation: PropTypes.number.isRequired,\n};\n\n\nexport function Outlook(props) {\n  const {\n    country, cases, deaths,\n  } = props;\n  const r0 = rNoughtWeeklyAverage(cases);\n  const d = recentDeaths(deaths);\n  const df = deathFactor(cases, deaths);\n  return (\n    <div className=\"mt-4\">\n      <h5>\n        Outlook for&nbsp;\n        {maybeThe(country)}\n      </h5>\n      {Number.isNaN(r0)\n        ? (\n          <p>\n            {language.NORNOUGHT.replace(/{country}/g, maybeThe(country))}\n          </p>\n        )\n        : (\n          <div>\n            <p>\n              {language.RNOUGHT.replace(/{country}/g, maybeThe(country))}\n            </p>\n            <Alert variant={r0AlertLevel(r0)}>\n              R\n              <sub>0</sub>\n              &nbsp;=&nbsp;\n              {r0.toFixed(1)}\n            </Alert>\n            <p>\n              {language.RNOUGHTEXPL\n                .replace(/{country}/g, maybeThe(country))\n                .replace(/{summary}/g, r0Summary(r0))}\n            </p>\n            {!Number.isNaN(df) && (d > minDeathsPerMonth) && (\n              <p>\n                {needsDisclaimer(r0, df) ? language.PROJECTIONDISCLAIMER : ''}\n                {language.DEATHPROJECTION\n                  .replace(/{country}/g, maybeThe(country))\n                  .replace(/{recentDeaths}/g, d)\n                  .replace(/{projectionPhrase}/g, projectionPhrase(df))}\n              </p>\n            )}\n          </div>\n        )}\n    </div>\n  );\n}\n\nOutlook.propTypes = {\n  country: PropTypes.string.isRequired,\n  cases: PropTypes.arrayOf(PropTypes.number).isRequired,\n  deaths: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from 'react-bootstrap/Card';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\nimport { rNoughtWeeklyAverage, confirmedRecentCasesPer100K, estimatedRecentCasesPer100K } from './methodology';\nimport {\n  r0Color,\n  r0Colors,\n  defaultR0Color,\n  confirmedCasesColor,\n  confirmedCasesColors,\n  defaultConfirmedCasesColor,\n  estimatedCasesColor,\n  estimatedCasesColors,\n  defaultEstimatedCasesColor,\n} from './thresholds';\n\n\nexport const naMap = {\n  geoUrl: 'maps/northamerica.json',\n  projection: 'geoAlbers',\n  projectionConfig: { rotate: [100, -9, 0], scale: 800 },\n};\n\nexport const euMap = {\n  geoUrl: 'maps/europe.json',\n  projection: 'geoAzimuthalEqualArea',\n  projectionConfig: { rotate: [-10.0, -52.0, 0], scale: 1000 },\n};\n\nexport const colorMapFactory = (getValue, colorScale, defaultColor) => ((name) => {\n  const value = getValue(name);\n  return Number.isNaN(value) ? defaultColor : colorScale(value);\n});\n\n\nconst Map = (props) => {\n  const { mapType, colorMap, onCountryChange } = props;\n  const { geoUrl, projection, projectionConfig } = mapType;\n  return (\n    <ComposableMap\n      projection={projection}\n      projectionConfig={projectionConfig}\n      viewBox=\"0 0 800 600\"\n    >\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          geographies.map((geo) => (\n            <Geography\n              key={geo.rsmKey}\n              geography={geo}\n              onClick={() => (onCountryChange(geo.properties.NAME_EN))}\n              fill={colorMap(geo.properties.NAME_EN)}\n              stroke=\"grey\"\n            />\n          ))\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\n\nconst propTypeMap = PropTypes.shape({\n  geoUrl: PropTypes.string,\n  projection: PropTypes.string,\n  projectionConfig: PropTypes.shape({\n    rotate: PropTypes.arrayOf(PropTypes.number),\n    scale: PropTypes.number,\n  }),\n});\n\nMap.propTypes = {\n  mapType: propTypeMap.isRequired,\n  colorMap: PropTypes.func.isRequired,\n  onCountryChange: PropTypes.func.isRequired,\n};\n\n\nconst LegendEntry = (props) => {\n  const { text, color } = props;\n  return (\n    <span style={{ paddingRight: '10px', display: 'inline-block' }}>\n      <svg\n        className=\"bi bi-square-fill\"\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        fill={color}\n        stroke=\"grey\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <rect width=\"16\" height=\"16\" rx=\"2\" />\n      </svg>\n      {text}\n    </span>\n  );\n};\n\nLegendEntry.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n};\n\nconst Legend = (props) => {\n  const { colorArray } = props;\n  return (\n    <div style={{ margin: '5px 0' }}>\n      {colorArray.slice(0, -1).map(([key, value]) => (\n        <LegendEntry key={key} text={` < ${key}`} color={value} />\n      ))}\n      <LegendEntry\n        key={colorArray.slice(-1)[0][0]}\n        text={` \\u{2265} ${colorArray.slice(-2)[0][0]}`}\n        color={colorArray.slice(-1)[0][1]}\n      />\n    </div>\n  );\n};\n\nLegend.propTypes = {\n  colorArray: PropTypes.arrayOf(PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  )).isRequired,\n};\n\n\nexport const R0Map = (props) => {\n  const { mapType, cases, onCountryChange } = props;\n  const colorMap = colorMapFactory(\n    (name) => (name in cases ? rNoughtWeeklyAverage(cases[name]) : NaN),\n    r0Color,\n    defaultR0Color,\n  );\n  return (\n    <Card className=\"mt-4\">\n      <Card.Header>\n        Basic reproduction number\n      </Card.Header>\n      <Card.Body>\n        <Map mapType={mapType} colorMap={colorMap} onCountryChange={onCountryChange} />\n        <Legend colorArray={Array.from(r0Colors)} />\n        <Card.Text>\n          The basic reproduction number indicates whether infection rates are\n          going down (blue) or up (red). See the&nbsp;\n          <a href=\"https://github.com/shouldibeworried/covid19#basic-reproduction-number\">\n            README\n          </a>\n          &nbsp;for more information.\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nR0Map.propTypes = {\n  mapType: propTypeMap.isRequired,\n  cases: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  onCountryChange: PropTypes.func.isRequired,\n};\n\n\nconst ConfirmedEstdToggle = (props) => {\n  const { showEstimated, onToggleChange } = props;\n\n  return (\n    <ToggleButtonGroup type=\"radio\" name=\"conf-estd\" value={showEstimated} onChange={onToggleChange}>\n      <ToggleButton variant=\"light\" value={false}>Confirmed</ToggleButton>\n      <ToggleButton variant=\"light\" value={true}>Estimated</ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\nConfirmedEstdToggle.propTypes = {\n  showEstimated: PropTypes.bool.isRequired,\n  onToggleChange: PropTypes.func.isRequired,\n};\n\nexport class RecentCasesMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showEstimated: false,\n    };\n    this.handleToggleChange = this.handleToggleChange.bind(this);\n  }\n\n  handleToggleChange(showEstimated) {\n    this.setState({ showEstimated });\n  }\n\n  render() {\n    const {\n      mapType,\n      cases,\n      deaths,\n      population,\n      onCountryChange,\n    } = this.props;\n    const { showEstimated } = this.state;\n    let colorMap;\n    if (showEstimated) {\n      colorMap = colorMapFactory(\n        (name) => (name in cases\n          ? estimatedRecentCasesPer100K(cases[name], deaths[name], population[name])\n          : NaN),\n        estimatedCasesColor,\n        defaultEstimatedCasesColor,\n      );\n    } else {\n      colorMap = colorMapFactory(\n        (name) => (name in cases\n          ? confirmedRecentCasesPer100K(cases[name], population[name])\n          : NaN),\n        confirmedCasesColor,\n        defaultConfirmedCasesColor,\n      );\n    }\n    return (\n      <Card className=\"mt-4\">\n        <Card.Header>\n          New cases over the last 7 days per 100K population\n        </Card.Header>\n        <Card.Body>\n          <Map mapType={mapType} colorMap={colorMap} onCountryChange={onCountryChange} />\n          <Legend colorArray={showEstimated\n            ? Array.from(estimatedCasesColors)\n            : Array.from(confirmedCasesColors)}\n          />\n          <Card.Text>\n            See the&nbsp;\n            <a href=\"https://github.com/shouldibeworried/covid19#confirmed-recent-infections\">\n              README\n            </a>\n            &nbsp;for more information.\n          </Card.Text>\n          <ConfirmedEstdToggle\n            showEstimated={showEstimated}\n            onToggleChange={this.handleToggleChange}\n          />\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nRecentCasesMap.propTypes = {\n  mapType: propTypeMap.isRequired,\n  cases: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  deaths: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  population: PropTypes.objectOf(PropTypes.number).isRequired,\n  onCountryChange: PropTypes.func.isRequired,\n};\n","import eu from './data/eu.json';\nimport na from './data/na.json';\n\nconst longCodes = {\n  'de-at': 'Austria',\n  'fr-be': 'Belgium',\n  'nl-be': 'Belgium',\n  'sv-fi': 'Finland',\n  'en-ie': 'Ireland',\n  'de-li': 'Liechtenstein',\n  'fr-lu': 'Luxembourg',\n  'de-lu': 'Luxembourg',\n  'fr-ch': 'Switzerland',\n  'de-ch': 'Switzerland',\n  'it-ch': 'Switzerland',\n  'en-gb': 'United Kingdom',\n  'en-ca': 'Ontario',\n  'en-us': 'California',\n};\n\nconst shortCodes = {\n  bg: 'Bulgaria',\n  hr: 'Croatia',\n  cs: 'Czechia',\n  da: 'Denmark',\n  et: 'Estonia',\n  fi: 'Finland',\n  fr: 'France',\n  de: 'Germany',\n  el: 'Greece',\n  hu: 'Hungary',\n  is: 'Iceland',\n  it: 'Italy',\n  lv: 'Latvia',\n  lt: 'Lithuania',\n  mt: 'Malta',\n  nl: 'Netherlands',\n  no: 'Norway',\n  nb: 'Norway',\n  nn: 'Norway',\n  pl: 'Poland',\n  pt: 'Portugal',\n  ro: 'Romania',\n  sk: 'Slovakia',\n  sl: 'Slovenia',\n  es: 'Spain',\n  sv: 'Sweden',\n  rm: 'Switzerland',\n  en: 'California',\n};\n\n\nconst pickAPlace = () => {\n  const hash = decodeURIComponent(window.location.hash.slice(1));\n  if (hash in eu.cases || hash in na.cases) {\n    return hash;\n  }\n\n  const lang = navigator.language.toLowerCase();\n\n  if (lang in longCodes) {\n    return longCodes[lang];\n  }\n\n  if (lang.substring(0, 2) in shortCodes) {\n    return shortCodes[lang.substring(0, 2)];\n  }\n\n  return 'California';\n};\n\n\nexport default pickAPlace;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport {\n  Header, CurrentSituation, Outlook,\n} from './components';\nimport {\n  naMap,\n  euMap,\n  R0Map,\n  RecentCasesMap,\n} from './maps';\n\nimport eu from './data/eu.json';\nimport na from './data/na.json';\nimport de from './data/na.json';\nimport population from './data/population.json';\nimport pickAPlace from './pickAPlace';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const country = pickAPlace();\n    this.state = { country };\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n\n  handleFilterChange(country) {\n    if (country in eu.cases || country in na.cases) {\n      this.setState({ country });\n      window.location.hash = country;\n    }\n  }\n\n  render() {\n    const { country } = this.state;\n    const cases = country in eu.cases ? eu.cases : na.cases;\n    const deaths = country in eu.deaths ? eu.deaths : na.deaths;\n    const lastUpdatedDate = country in eu.cases ? eu.dates.slice(-1)[0] : na.dates.slice(-1)[0];\n    const mapType = country in eu.cases ? euMap : naMap;\n    return (\n      <div className=\"App\">\n        <Header\n          country={country}\n          europe={Object.keys(eu.cases)}\n          america={Object.keys(na.cases)}\n          onFilterChange={this.handleFilterChange}\n        />\n        <Container>\n          <Row>\n            <Col md={7}>\n              <RecentCasesMap\n                mapType={mapType}\n                cases={cases}\n                deaths={deaths}\n                population={population}\n                onCountryChange={this.handleFilterChange}\n              />\n            </Col>\n            <Col>\n              <CurrentSituation\n                country={country}\n                cases={cases[country]}\n                deaths={deaths[country]}\n                localPopulation={population[country]}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={7}>\n              <R0Map mapType={mapType} cases={cases} onCountryChange={this.handleFilterChange} />\n            </Col>\n            <Col>\n              <Outlook\n                country={country}\n                cases={cases[country]}\n                deaths={deaths[country]}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <p className=\"mt-4\">\n              Data:&nbsp;\n              <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n                Johns Hopkins University\n              </a>\n              ; map shapes from:&nbsp;\n              <a href=\"https://www.naturalearthdata.com\">\n                Natural Earth\n              </a>\n              ; includes data as of&nbsp;\n              {Intl.DateTimeFormat('en-CA', {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n                timeZone: 'UTC',\n              }).format(new Date(lastUpdatedDate))}\n              ;\n            </p>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* Put any other imports below so that CSS from your\n * components takes precedence over default styles. */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}